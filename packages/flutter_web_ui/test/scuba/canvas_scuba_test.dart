// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import 'dart:html' as html;

import 'package:flutter_web_ui/src/bitmap_canvas.dart';
import 'package:flutter_web_ui/ui.dart';
import 'package:test/test.dart';

import 'scuba.dart';

void main() async {
  // Scuba doesn't give us viewport smaller than 472px wide.
  final EngineScubaTester scuba = await EngineScubaTester.initialize(
    viewportSize: Size(500, 100),
  );

  /// Draws several lines, some aligned precisely with the pixel grid, and some
  /// that are offset by 0.5 vertically or horizontally.
  ///
  /// The produced picture stresses the antialiasing generated by the browser
  /// when positioning and rasterizing `<canvas>` tags. Aliasing artifacts can
  /// be seen depending on pixel alignment and whether antialiasing happens
  /// before or after rasterization.
  void drawMisalignedLines(BitmapCanvas canvas) {
    final linePaint = (Paint()
          ..style = PaintingStyle.stroke
          ..strokeWidth = 1)
        .webOnlyPaintData;

    final fillPaint = (Paint()..style = PaintingStyle.fill).webOnlyPaintData;

    canvas.drawRect(
      Rect.fromLTWH(0, 0, 40, 40),
      linePaint,
    );

    canvas.drawLine(
      Offset(10, 0),
      Offset(10, 40),
      linePaint,
    );

    canvas.drawLine(
      Offset(20.5, 0),
      Offset(20, 40),
      linePaint,
    );

    canvas.drawCircle(Offset(30, 10), 3, fillPaint);
    canvas.drawCircle(Offset(30.5, 30), 3, fillPaint);
  }

  test('renders pixels that are not aligned inside the canvas', () async {
    final BitmapCanvas canvas = BitmapCanvas(Rect.fromLTWH(0, 0, 60, 60));

    drawMisalignedLines(canvas);

    html.document.body.style.transform = 'translate(10px, 10px)';
    html.document.body.append(canvas.rootElement);

    await scuba.diffScreenshot('misaligned_pixels_in_canvas_test');
  }, timeout: Timeout(Duration(seconds: 10)));

  test('compensates for misalignment of the canvas', () async {
    // Notice the 0.5 offset in the bounds rectangle. It's what causes the
    // misalignment of canvas relative to the pixel grid. BitmapCanvas will
    // shift its position back to 0.0 and at the same time it will it will
    // compensate by shifting the contents of the canvas in the opposite
    // direction.
    final BitmapCanvas canvas = BitmapCanvas(Rect.fromLTWH(0.5, 0.5, 60, 60));

    drawMisalignedLines(canvas);

    html.document.body.style.transform = 'translate(10px, 10px)';
    html.document.body.append(canvas.rootElement);

    await scuba.diffScreenshot('misaligned_canvas_test');
  }, timeout: Timeout(Duration(seconds: 10)));
}

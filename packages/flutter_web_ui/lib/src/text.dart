// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import 'dart:html';
import 'dart:math' as math;

import 'package:meta/meta.dart';

import 'canvas.dart';
import 'dom_renderer.dart';
import 'geometry.dart';
import 'hash_codes.dart';
import 'lerp.dart';
import 'painting.dart';
import 'text/ruler.dart';
import 'text/measurement.dart';
import 'text/word_breaker.dart';
import 'util.dart';
import 'window.dart';

/// Whether to slant the glyphs in the font
enum FontStyle {
  /// Use the upright glyphs
  normal,

  /// Use glyphs designed for slanting
  italic,
}

/// The thickness of the glyphs used to draw the text
class FontWeight {
  const FontWeight._(this.index);

  /// The encoded integer value of this font weight.
  final int index;

  /// Thin, the least thick
  static const FontWeight w100 = const FontWeight._(0);

  /// Extra-light
  static const FontWeight w200 = const FontWeight._(1);

  /// Light
  static const FontWeight w300 = const FontWeight._(2);

  /// Normal / regular / plain
  static const FontWeight w400 = const FontWeight._(3);

  /// Medium
  static const FontWeight w500 = const FontWeight._(4);

  /// Semi-bold
  static const FontWeight w600 = const FontWeight._(5);

  /// Bold
  static const FontWeight w700 = const FontWeight._(6);

  /// Extra-bold
  static const FontWeight w800 = const FontWeight._(7);

  /// Black, the most thick
  static const FontWeight w900 = const FontWeight._(8);

  /// The default font weight.
  static const FontWeight normal = w400;

  /// A commonly used font weight that is heavier than normal.
  static const FontWeight bold = w700;

  /// A list of all the font weights.
  static const List<FontWeight> values = const <FontWeight>[
    w100,
    w200,
    w300,
    w400,
    w500,
    w600,
    w700,
    w800,
    w900
  ];

  /// Linearly interpolates between two font weights.
  ///
  /// Rather than using fractional weights, the interpolation rounds to the
  /// nearest weight.
  ///
  /// Any null values for `a` or `b` are interpreted as equivalent to [normal]
  /// (also known as [w400]).
  ///
  /// The `t` argument represents position on the timeline, with 0.0 meaning
  /// that the interpolation has not started, returning `a` (or something
  /// equivalent to `a`), 1.0 meaning that the interpolation has finished,
  /// returning `b` (or something equivalent to `b`), and values in between
  /// meaning that the interpolation is at the relevant point on the timeline
  /// between `a` and `b`. The interpolation can be extrapolated beyond 0.0 and
  /// 1.0, so negative values and values greater than 1.0 are valid (and can
  /// easily be generated by curves such as [Curves.elasticInOut]). The result
  /// is clamped to the range [w100]â€“[w900].
  ///
  /// Values for `t` are usually obtained from an [Animation<double>], such as
  /// an [AnimationController].
  static FontWeight lerp(FontWeight a, FontWeight b, double t) {
    assert(t != null);
    return values[
        lerpDouble(a?.index ?? normal.index, b?.index ?? normal.index, t)
            .round()
            .clamp(0, 8)];
  }

  @override
  String toString() {
    return const <int, String>{
      0: 'FontWeight.w100',
      1: 'FontWeight.w200',
      2: 'FontWeight.w300',
      3: 'FontWeight.w400',
      4: 'FontWeight.w500',
      5: 'FontWeight.w600',
      6: 'FontWeight.w700',
      7: 'FontWeight.w800',
      8: 'FontWeight.w900',
    }[index];
  }
}

/// Whether and how to align text horizontally.
// The order of this enum must match the order of the values in
// RenderStyleConstants.h's ETextAlign.
enum TextAlign {
  /// Align the text on the left edge of the container.
  left,

  /// Align the text on the right edge of the container.
  right,

  /// Align the text in the center of the container.
  center,

  /// Stretch lines of text that end with a soft line break to fill the width of
  /// the container.
  ///
  /// Lines that end with hard line breaks are aligned towards the [start] edge.
  justify,

  /// Align the text on the leading edge of the container.
  ///
  /// For left-to-right text ([TextDirection.ltr]), this is the left edge.
  ///
  /// For right-to-left text ([TextDirection.rtl]), this is the right edge.
  start,

  /// Align the text on the trailing edge of the container.
  ///
  /// For left-to-right text ([TextDirection.ltr]), this is the right edge.
  ///
  /// For right-to-left text ([TextDirection.rtl]), this is the left edge.
  end,
}

/// Converts [align] to its corresponding CSS value.
///
/// This value is used as the "text-align" CSS property, e.g.:
///
/// ```css
/// text-align: right;
/// ```
String textAlignToCssValue(TextAlign align, TextDirection textDirection) {
  switch (align) {
    case TextAlign.left:
      return 'left';
    case TextAlign.right:
      return 'right';
    case TextAlign.center:
      return 'center';
    case TextAlign.justify:
      return 'justify';
    case TextAlign.start:
      switch (textDirection) {
        case TextDirection.ltr:
          return null; // it's the default
        case TextDirection.rtl:
          return 'right';
      }
      break;
    case TextAlign.end:
      switch (textDirection) {
        case TextDirection.ltr:
          return 'end';
        case TextDirection.rtl:
          return 'left';
      }
      break;
  }
  throw AssertionError('Unsupported TextAlign value $align');
}

/// A horizontal line used for aligning text.
enum TextBaseline {
  /// The horizontal line used to align the bottom of glyphs for alphabetic
  /// characters.
  alphabetic,

  /// The horizontal line used to align ideographic characters.
  ideographic,
}

/// A linear decoration to draw near the text.
class TextDecoration {
  const TextDecoration._(this._mask);

  /// Creates a decoration that paints the union of all the given decorations.
  factory TextDecoration.combine(List<TextDecoration> decorations) {
    int mask = 0;
    for (TextDecoration decoration in decorations) mask |= decoration._mask;
    return new TextDecoration._(mask);
  }

  final int _mask;

  /// Whether this decoration will paint at least as much decoration as the
  /// given decoration.
  bool contains(TextDecoration other) {
    return (_mask | other._mask) == _mask;
  }

  /// Do not draw a decoration
  static const TextDecoration none = const TextDecoration._(0x0);

  /// Draw a line underneath each line of text
  static const TextDecoration underline = const TextDecoration._(0x1);

  /// Draw a line above each line of text
  static const TextDecoration overline = const TextDecoration._(0x2);

  /// Draw a line through each line of text
  static const TextDecoration lineThrough = const TextDecoration._(0x4);

  @override
  bool operator ==(dynamic other) {
    if (other is! TextDecoration) return false;
    final TextDecoration typedOther = other;
    return _mask == typedOther._mask;
  }

  @override
  int get hashCode => _mask.hashCode;

  @override
  String toString() {
    if (_mask == 0) return 'TextDecoration.none';
    final List<String> values = <String>[];
    if (_mask & underline._mask != 0) values.add('underline');
    if (_mask & overline._mask != 0) values.add('overline');
    if (_mask & lineThrough._mask != 0) values.add('lineThrough');
    if (values.length == 1) return 'TextDecoration.${values[0]}';
    return 'TextDecoration.combine([${values.join(", ")}])';
  }
}

/// The style in which to draw a text decoration
enum TextDecorationStyle {
  /// Draw a solid line
  solid,

  /// Draw two lines
  double,

  /// Draw a dotted line
  dotted,

  /// Draw a dashed line
  dashed,

  /// Draw a sinusoidal line
  wavy
}

/// An opaque object that determines the size, position, and rendering of text.
class TextStyle {
  /// Creates a new TextStyle object.
  ///
  /// * `color`: The color to use when painting the text. If this is specified,
  ///   `foreground` must be null.
  /// * `decoration`: The decorations to paint near the text (e.g., an
  ///   underline).
  /// * `decorationColor`: The color in which to paint the text decorations.
  /// * `decorationStyle`: The style in which to paint the text decorations
  ///   (e.g., dashed).
  /// * `fontWeight`: The typeface thickness to use when painting the text
  ///   (e.g., bold).
  /// * `fontStyle`: The typeface variant to use when drawing the letters (e.g.,
  ///   italics).
  /// * `fontFamily`: The name of the font to use when painting the text (e.g.,
  ///   Roboto).
  /// * `fontSize`: The size of glyphs (in logical pixels) to use when painting
  ///   the text.
  /// * `letterSpacing`: The amount of space (in logical pixels) to add between
  ///   each letter.
  /// * `wordSpacing`: The amount of space (in logical pixels) to add at each
  ///   sequence of white-space (i.e. between each word).
  /// * `textBaseline`: The common baseline that should be aligned between this
  ///   text span and its parent text span, or, for the root text spans, with
  ///   the line box.
  /// * `height`: The height of this text span, as a multiple of the font size.
  /// * `locale`: The locale used to select region-specific glyphs.
  /// * `background`: The paint drawn as a background for the text.
  /// * `foreground`: The paint used to draw the text. If this is specified,
  ///   `color` must be null.
  TextStyle({
    Color color,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    FontWeight fontWeight,
    FontStyle fontStyle,
    TextBaseline textBaseline,
    String fontFamily,
    List<String> fontFamilyFallback,
    double fontSize,
    double letterSpacing,
    List<Shadow> shadows,
    double wordSpacing,
    double height,
    Locale locale,
    Paint background,
    Paint foreground,
  })  : assert(
            color == null || foreground == null,
            'Cannot provide both a color and a foreground\n'
            'The color argument is just a shorthand for "foreground:'
            ' new Paint()..color = color".'),
        _color = color,
        _decoration = decoration,
        _decorationColor = decorationColor,
        _decorationStyle = decorationStyle,
        _fontWeight = fontWeight,
        _fontStyle = fontStyle,
        _textBaseline = textBaseline,
        _fontFamily = fontFamily ?? '',
        // TODO: add support for web font fallback
        _fontFamilyFallback = fontFamilyFallback,
        _fontSize = fontSize,
        _letterSpacing = letterSpacing,
        _wordSpacing = wordSpacing,
        _height = height,
        _locale = locale,
        _shadows = shadows,
        _background = background,
        _foreground = foreground;

  final Color _color;
  final TextDecoration _decoration;
  final Color _decorationColor;
  final TextDecorationStyle _decorationStyle;
  final FontWeight _fontWeight;
  final FontStyle _fontStyle;
  final TextBaseline _textBaseline;
  final String _fontFamily;
  final List<String> _fontFamilyFallback;
  final double _fontSize;
  final double _letterSpacing;
  final double _wordSpacing;
  final double _height;
  final Locale _locale;
  final Paint _background;
  final Paint _foreground;
  final List<Shadow> _shadows;

  @override
  bool operator ==(dynamic other) {
    if (identical(this, other)) return true;
    if (other is! TextStyle) return false;
    final TextStyle typedOther = other;
    return _color == typedOther._color &&
        _decoration == typedOther._decoration &&
        _decorationColor == typedOther._decorationColor &&
        _decorationStyle == typedOther._decorationStyle &&
        _fontWeight == typedOther._fontWeight &&
        _fontStyle == typedOther._fontStyle &&
        _textBaseline == typedOther._textBaseline &&
        _fontFamily == typedOther._fontFamily &&
        _fontSize == typedOther._fontSize &&
        _letterSpacing == typedOther._letterSpacing &&
        _wordSpacing == typedOther._wordSpacing &&
        _height == typedOther._height &&
        _locale == typedOther._locale &&
        _background == typedOther._background &&
        _foreground == typedOther._foreground;
  }

  @override
  int get hashCode => hashValues(
      _color,
      _decoration,
      _decorationColor,
      _decorationStyle,
      _fontWeight,
      _fontStyle,
      _textBaseline,
      _fontFamily,
      _fontSize,
      _letterSpacing,
      _wordSpacing,
      _height,
      _locale,
      _background,
      _foreground);

  @override
  String toString() {
    if (assertionsEnabled) {
      return 'TextStyle('
          'color: ${_color != null ? _color : "unspecified"}, '
          'decoration: ${_decoration ?? "unspecified"}, '
          'decorationColor: ${_decorationColor ?? "unspecified"}, '
          'decorationStyle: ${_decorationStyle ?? "unspecified"}, '
          'fontWeight: ${_fontWeight ?? "unspecified"}, '
          'fontStyle: ${_fontStyle ?? "unspecified"}, '
          'textBaseline: ${_textBaseline ?? "unspecified"}, '
          'fontFamily: ${_fontFamily == null || _fontFamily.isEmpty ? "unspecified" : _fontFamily}, '
          'fontFamilyFallback: ${_fontFamilyFallback != null && _fontFamilyFallback.isNotEmpty ? _fontFamilyFallback : "unspecified"}, '
          'fontSize: ${_fontSize != null ? _fontSize.toStringAsFixed(1) : "unspecified"}, '
          'letterSpacing: ${_letterSpacing ?? "unspecified"}, '
          'wordSpacing: ${_wordSpacing ?? "unspecified"}, '
          'height: ${_height == null ? "unspecified" : "${_height.toStringAsFixed(1)}x"}, '
          'locale: ${_locale ?? "unspecified"}, '
          'background: ${_background ?? "unspecified"}, '
          'foreground: ${_foreground ?? "unspecified"}, '
          'shadows: ${_shadows ?? "unspecified"}'
          ')';
    } else {
      return super.toString();
    }
  }
}

/// An opaque object that determines the configuration used by
/// [ParagraphBuilder] to position lines within a [Paragraph] of text.
class ParagraphStyle {
  /// Creates a new ParagraphStyle object.
  ///
  /// * `textAlign`: The alignment of the text within the lines of the
  ///   paragraph. If the last line is ellipsized (see `ellipsis` below), the
  ///   alignment is applied to that line after it has been truncated but before
  ///   the ellipsis has been added.
  //   See: https://github.com/flutter/flutter/issues/9819
  ///
  /// * `textDirection`: The directionality of the text, left-to-right (e.g.
  ///   Norwegian) or right-to-left (e.g. Hebrew). This controls the overall
  ///   directionality of the paragraph, as well as the meaning of
  ///   [TextAlign.start] and [TextAlign.end] in the `textAlign` field.
  ///
  /// * `fontWeight`: The typeface thickness to use when painting the text
  ///   (e.g., bold).
  ///
  /// * `fontStyle`: The typeface variant to use when drawing the letters (e.g.,
  ///   italics).
  ///
  /// * `maxLines`: The maximum number of lines painted. Lines beyond this
  ///   number are silently dropped. For example, if `maxLines` is 1, then only
  ///   one line is rendered. If `maxLines` is null, but `ellipsis` is not null,
  ///   then lines after the first one that overflows the width constraints are
  ///   dropped. The width constraints are those set in the
  ///   [ParagraphConstraints] object passed to the [Paragraph.layout] method.
  ///
  /// * `fontFamily`: The name of the font to use when painting the text (e.g.,
  ///   Roboto).
  ///
  /// * `fontSize`: The size of glyphs (in logical pixels) to use when painting
  ///   the text.
  ///
  /// * `lineHeight`: The minimum height of the line boxes, as a multiple of the
  ///   font size.
  ///
  /// * `ellipsis`: String used to ellipsize overflowing text. If `maxLines` is
  ///   not null, then the `ellipsis`, if any, is applied to the last rendered
  ///   line, if that line overflows the width constraints. If `maxLines` is
  ///   null, then the `ellipsis` is applied to the first line that overflows
  ///   the width constraints, and subsequent lines are dropped. The width
  ///   constraints are those set in the [ParagraphConstraints] object passed to
  ///   the [Paragraph.layout] method. The empty string and the null value are
  ///   considered equivalent and turn off this behavior.
  ///
  /// * `locale`: The locale used to select region-specific glyphs.
  const ParagraphStyle({
    TextAlign textAlign,
    TextDirection textDirection,
    FontWeight fontWeight,
    FontStyle fontStyle,
    int maxLines,
    String fontFamily,
    double fontSize,
    double lineHeight,
    String ellipsis,
    Locale locale,
  })  : _textAlign = textAlign,
        _textDirection = textDirection,
        _fontWeight = fontWeight,
        _fontStyle = fontStyle,
        _maxLines = maxLines,
        _fontFamily = fontFamily,
        _fontSize = fontSize,
        _lineHeight = lineHeight,
        _ellipsis = ellipsis,
        _locale = locale;

  final TextAlign _textAlign;
  final TextDirection _textDirection;
  final FontWeight _fontWeight;
  final FontStyle _fontStyle;
  final int _maxLines;
  final String _fontFamily;
  final double _fontSize;
  final double _lineHeight;
  final String _ellipsis;
  final Locale _locale;

  @override
  bool operator ==(dynamic other) {
    if (identical(this, other)) return true;
    if (other.runtimeType != runtimeType) return false;
    final ParagraphStyle typedOther = other;
    return _textAlign == typedOther._textAlign ||
        _textDirection == typedOther._textDirection ||
        _fontWeight == typedOther._fontWeight ||
        _fontStyle == typedOther._fontStyle ||
        _maxLines == typedOther._maxLines ||
        _fontFamily == typedOther._fontFamily ||
        _fontSize == typedOther._fontSize ||
        _lineHeight == typedOther._lineHeight ||
        _ellipsis == typedOther._ellipsis ||
        _locale == typedOther._locale;
  }

  @override
  int get hashCode =>
      hashValues(_fontFamily, _fontSize, _lineHeight, _ellipsis, _locale);

  @override
  String toString() {
    if (assertionsEnabled) {
      return '$runtimeType('
          'textAlign: ${_textAlign ?? "unspecified"}, '
          'textDirection: ${_textDirection ?? "unspecified"}, '
          'fontWeight: ${_fontWeight ?? "unspecified"}, '
          'fontStyle: ${_fontStyle ?? "unspecified"}, '
          'maxLines: ${_maxLines ?? "unspecified"}, '
          'fontFamily: ${_fontFamily ?? "unspecified"}, '
          'fontSize: ${_fontSize != null ? _fontSize.toStringAsFixed(1) : "unspecified"}, '
          'lineHeight: ${_lineHeight == null ? "unspecified" : "${_lineHeight.toStringAsFixed(1)}x"}, '
          'ellipsis: ${_ellipsis ?? "unspecified"}, '
          'locale: ${_locale ?? "unspecified"}'
          ')';
    } else {
      return super.toString();
    }
  }
}

/// A direction in which text flows.
///
/// Some languages are written from the left to the right (for example, English,
/// Tamil, or Chinese), while others are written from the right to the left (for
/// example Aramaic, Hebrew, or Urdu). Some are also written in a mixture, for
/// example Arabic is mostly written right-to-left, with numerals written
/// left-to-right.
///
/// The text direction must be provided to APIs that render text or lay out
/// boxes horizontally, so that they can determine which direction to start in:
/// either right-to-left, [TextDirection.rtl]; or left-to-right,
/// [TextDirection.ltr].
///
/// ## Design discussion
///
/// Flutter is designed to address the needs of applications written in any of
/// the world's currently-used languages, whether they use a right-to-left or
/// left-to-right writing direction. Flutter does not support other writing
/// modes, such as vertical text or boustrophedon text, as these are rarely used
/// in computer programs.
///
/// It is common when developing user interface frameworks to pick a default
/// text direction â€” typically left-to-right, the direction most familiar to the
/// engineers working on the framework â€” because this simplifies the development
/// of applications on the platform. Unfortunately, this frequently results in
/// the platform having unexpected left-to-right biases or assumptions, as
/// engineers will typically miss places where they need to support
/// right-to-left text. This then results in bugs that only manifest in
/// right-to-left environments.
///
/// In an effort to minimize the extent to which Flutter experiences this
/// category of issues, the lowest levels of the Flutter framework do not have a
/// default text reading direction. Any time a reading direction is necessary,
/// for example when text is to be displayed, or when a
/// writing-direction-dependent value is to be interpreted, the reading
/// direction must be explicitly specified. Where possible, such as in `switch`
/// statements, the right-to-left case is listed first, to avoid the impression
/// that it is an afterthought.
///
/// At the higher levels (specifically starting at the widgets library), an
/// ambient [Directionality] is introduced, which provides a default. Thus, for
/// instance, a [Text] widget in the scope of a [MaterialApp] widget does not
/// need to be given an explicit writing direction. The [Directionality.of]
/// static method can be used to obtain the ambient text direction for a
/// particular [BuildContext].
///
/// ### Known left-to-right biases in Flutter
///
/// Despite the design intent described above, certain left-to-right biases have
/// nonetheless crept into Flutter's design. These include:
///
///  * The [Canvas] origin is at the top left, and the x-axis increases in a
///    left-to-right direction.
///
///  * The default localization in the widgets and material libraries is
///    American English, which is left-to-right.
///
/// ### Visual properties vs directional properties
///
/// Many classes in the Flutter framework are offered in two versions, a
/// visually-oriented variant, and a text-direction-dependent variant. For
/// example, [EdgeInsets] is described in terms of top, left, right, and bottom,
/// while [EdgeInsetsDirectional] is described in terms of top, start, end, and
/// bottom, where start and end correspond to right and left in right-to-left
/// text and left and right in left-to-right text.
///
/// There are distinct use cases for each of these variants.
///
/// Text-direction-dependent variants are useful when developing user interfaces
/// that should "flip" with the text direction. For example, a paragraph of text
/// in English will typically be left-aligned and a quote will be indented from
/// the left, while in Arabic it will be right-aligned and indented from the
/// right. Both of these cases are described by the direction-dependent
/// [TextAlign.start] and [EdgeInsetsDirectional.start].
///
/// In contrast, the visual variants are useful when the text direction is known
/// and not affected by the reading direction. For example, an application
/// giving driving directions might show a "turn left" arrow on the left and a
/// "turn right" arrow on the right â€” and would do so whether the application
/// was localized to French (left-to-right) or Hebrew (right-to-left).
///
/// In practice, it is also expected that many developers will only be
/// targeting one language, and in that case it may be simpler to think in
/// visual terms.
// The order of this enum must match the order of the values in
// TextDirection.h's TextDirection.
enum TextDirection {
  /// The text flows from right to left (e.g. Arabic, Hebrew).
  rtl,

  /// The text flows from left to right (e.g., English, French).
  ltr,
}

/// Converts [textDirection] to its corresponding CSS value.
///
/// This value is used for the "direction" CSS property, e.g.:
///
/// ```css
/// direction: rtl;
/// ```
String textDirectionToCssValue(TextDirection textDirection) {
  return textDirection == TextDirection.ltr
      ? null // it's the default
      : 'rtl';
}

/// A rectangle enclosing a run of text.
///
/// This is similar to [Rect] but includes an inherent [TextDirection].
class TextBox {
  /// Creates an object that describes a box containing text.
  const TextBox.fromLTRBD(
    this.left,
    this.top,
    this.right,
    this.bottom,
    this.direction,
  );

  TextBox._(
    this.left,
    this.top,
    this.right,
    this.bottom,
    int directionIndex,
  ) : direction = TextDirection.values[directionIndex];

  /// The left edge of the text box, irrespective of direction.
  ///
  /// To get the leading edge (which may depend on the [direction]), consider
  /// [start].
  final double left;

  /// The top edge of the text box.
  final double top;

  /// The right edge of the text box, irrespective of direction.
  ///
  /// To get the trailing edge (which may depend on the [direction]), consider
  /// [end].
  final double right;

  /// The bottom edge of the text box.
  final double bottom;

  /// The direction in which text inside this box flows.
  final TextDirection direction;

  /// Returns a rect of the same size as this box.
  Rect toRect() => new Rect.fromLTRB(left, top, right, bottom);

  /// The [left] edge of the box for left-to-right text; the [right] edge of the
  /// box for right-to-left text.
  ///
  /// See also:
  ///
  ///  * [direction], which specifies the text direction.
  double get start {
    return (direction == TextDirection.ltr) ? left : right;
  }

  /// The [right] edge of the box for left-to-right text; the [left] edge of the
  /// box for right-to-left text.
  ///
  /// See also:
  ///
  ///  * [direction], which specifies the text direction.
  double get end {
    return (direction == TextDirection.ltr) ? right : left;
  }

  @override
  bool operator ==(dynamic other) {
    if (identical(this, other)) return true;
    if (other.runtimeType != runtimeType) return false;
    final TextBox typedOther = other;
    return typedOther.left == left &&
        typedOther.top == top &&
        typedOther.right == right &&
        typedOther.bottom == bottom &&
        typedOther.direction == direction;
  }

  @override
  int get hashCode => hashValues(left, top, right, bottom, direction);

  @override
  String toString() {
    if (assertionsEnabled) {
      return 'TextBox.fromLTRBD('
          '${left.toStringAsFixed(1)}, '
          '${top.toStringAsFixed(1)}, '
          '${right.toStringAsFixed(1)}, '
          '${bottom.toStringAsFixed(1)}, '
          '$direction)';
    }
    return super.toString();
  }
}

/// Whether a [TextPosition] is visually upstream or downstream of its offset.
///
/// For example, when a text position exists at a line break, a single offset
/// has two visual positions, one prior to the line break (at the end of the
/// first line) and one after the line break (at the start of the second line).
/// A text affinity disambiguates between those cases. (Something similar
/// happens with between runs of bidirectional text.)
enum TextAffinity {
  /// The position has affinity for the upstream side of the text position.
  ///
  /// For example, if the offset of the text position is a line break, the
  /// position represents the end of the first line.
  upstream,

  /// The position has affinity for the downstream side of the text position.
  ///
  /// For example, if the offset of the text position is a line break, the
  /// position represents the start of the second line.
  downstream,
}

/// A visual position in a string of text.
class TextPosition {
  /// Creates an object representing a particular position in a string.
  ///
  /// The arguments must not be null (so the [offset] argument is required).
  const TextPosition({
    this.offset,
    this.affinity = TextAffinity.downstream,
  })  : assert(offset != null),
        assert(affinity != null);

  /// The index of the character that immediately follows the position.
  ///
  /// For example, given the string `'Hello'`, offset 0 represents the cursor
  /// being before the `H`, while offset 5 represents the cursor being just
  /// after the `o`.
  final int offset;

  /// If the offset has more than one visual location (e.g., occurs at a line
  /// break), which of the two locations is represented by this position.
  ///
  /// For example, if the text `'AB'` had a forced line break between the `A`
  /// and the `B`, then the downstream affinity at offset 1 represents the
  /// cursor being just after the `A` on the first line, while the upstream
  /// affinity at offset 1 represents the cursor being just before the `B` on
  /// the first line.
  final TextAffinity affinity;

  @override
  bool operator ==(dynamic other) {
    if (other.runtimeType != runtimeType) return false;
    final TextPosition typedOther = other;
    return typedOther.offset == offset && typedOther.affinity == affinity;
  }

  @override
  int get hashCode => hashValues(offset, affinity);

  @override
  String toString() {
    return '$runtimeType(offset: $offset, affinity: $affinity)';
  }
}

/// Layout constraints for [Paragraph] objects.
///
/// Instances of this class are typically used with [Paragraph.layout].
///
/// The only constraint that can be specified is the [width]. See the discussion
/// at [width] for more details.
class ParagraphConstraints {
  /// Creates constraints for laying out a paragraph.
  ///
  /// The [width] argument must not be null.
  const ParagraphConstraints({
    this.width,
  }) : assert(width != null);

  /// The width the paragraph should use when computing the positions of glyphs.
  ///
  /// If possible, the paragraph will select a soft line break prior to reaching
  /// this width. If no soft line break is available, the paragraph will select
  /// a hard line break prior to reaching this width. If that would force a line
  /// break without any characters having been placed (i.e. if the next
  /// character to be laid out does not fit within the given width constraint)
  /// then the next character is allowed to overflow the width constraint and a
  /// forced line break is placed after it (even if an explicit line break
  /// follows).
  ///
  /// The width influences how ellipses are applied. See the discussion at [new
  /// ParagraphStyle] for more details.
  ///
  /// This width is also used to position glyphs according to the [TextAlign]
  /// alignment described in the [ParagraphStyle] used when building the
  /// [Paragraph] with a [ParagraphBuilder].
  final double width;

  @override
  bool operator ==(dynamic other) {
    if (other.runtimeType != runtimeType) return false;
    final ParagraphConstraints typedOther = other;
    return typedOther.width == width;
  }

  @override
  int get hashCode => width.hashCode;

  @override
  String toString() => '$runtimeType(width: $width)';
}

/// A paragraph of text.
///
/// A paragraph retains the size and position of each glyph in the text and can
/// be efficiently resized and painted.
///
/// To create a [Paragraph] object, use a [ParagraphBuilder].
///
/// Paragraphs can be displayed on a [Canvas] using the [Canvas.drawParagraph]
/// method.
class Paragraph {
  /// This class is created by the engine, and should not be instantiated
  /// or extended directly.
  ///
  /// To create a [Paragraph] object, use a [ParagraphBuilder].
  Paragraph._({
    @required HtmlElement paragraphElement,
    @required ParagraphGeometricStyle paragraphGeometricStyle,
    @required String plainText,
    @required Paint paint,
    @required TextAlign textAlign,
    @required TextDirection textDirection,
  })  : assert((plainText == null && paint == null) ||
            (plainText != null && paint != null)),
        _paragraphElement = paragraphElement,
        _paragraphGeometricStyle = paragraphGeometricStyle,
        _plainText = plainText,
        _textAlign = textAlign,
        _textDirection = textDirection,
        _paint = paint;

  final HtmlElement _paragraphElement;
  final ParagraphGeometricStyle _paragraphGeometricStyle;
  final String _plainText;
  final Paint _paint;
  final TextAlign _textAlign;
  final TextDirection _textDirection;

  /// Do not use this method other than for painting on the [ParagraphSurface].
  /// Instead use [ParagraphSurface] itself.
  ///
  /// It is likely that we will switch over to [Canvas] soon, and so this method
  /// of painting should be considered deprecated.
  HtmlElement webOnlyGetParagraphElement() => _paragraphElement;

  /// The amount of horizontal space this paragraph occupies.
  ///
  /// Valid only after [layout] has been called.
  double get width => _width;
  double _width = 0.0;

  /// The amount of vertical space this paragraph occupies.
  ///
  /// Valid only after [layout] has been called.
  double get height => _height;
  double _height = 0.0;

  /// The minimum width that this paragraph could be without failing to paint
  /// its contents within itself.
  ///
  /// Valid only after [layout] has been called.
  double get minIntrinsicWidth => _minIntrinsicWidth;
  double _minIntrinsicWidth = 0.0;

  /// Returns the smallest width beyond which increasing the width never
  /// decreases the height.
  ///
  /// Valid only after [layout] has been called.
  double get maxIntrinsicWidth => _maxIntrinsicWidth;
  double _maxIntrinsicWidth = 0.0;

  /// The distance from the top of the paragraph to the alphabetic
  /// baseline of the first line, in logical pixels.
  double get alphabeticBaseline => _alphabeticBaseline;
  double _alphabeticBaseline = 0.0;

  /// The distance from the top of the paragraph to the ideographic
  /// baseline of the first line, in logical pixels.
  double get ideographicBaseline => _ideographicBaseline;
  double _ideographicBaseline = 0.0;

  /// True if there is more vertical content, but the text was truncated, either
  /// because we reached `maxLines` lines of text or because the `maxLines` was
  /// null, `ellipsis` was not null, and one of the lines exceeded the width
  /// constraint.
  ///
  /// See the discussion of the `maxLines` and `ellipsis` arguments at [new
  /// ParagraphStyle].
  bool get didExceedMaxLines => _didExceedMaxLines;
  bool _didExceedMaxLines = false;

  ParagraphConstraints _lastUsedConstraints;

  /// Returns horizontal alignment offset for single line text when rendering
  /// directly into a canvas without css text alignment styling.
  double webOnlyAlignOffset = 0.0;

  /// Computes the size and position of each glyph in the paragraph.
  ///
  /// The [ParagraphConstraints] control how wide the text is allowed to be.
  void layout(ParagraphConstraints constraints) {
    if (constraints == _lastUsedConstraints) {
      return;
    }

    TextMeasurementService.instance.measure(this, constraints);
    _lastUsedConstraints = constraints;

    if (_webOnlyIsSingleLine && constraints != null) {
      switch (_textAlign) {
        case TextAlign.center:
          webOnlyAlignOffset = (constraints.width - _maxIntrinsicWidth) / 2.0;
          break;
        case TextAlign.right:
          webOnlyAlignOffset = constraints.width - _maxIntrinsicWidth;
          break;
        case TextAlign.start:
          webOnlyAlignOffset = _textDirection == TextDirection.rtl
              ? constraints.width - _maxIntrinsicWidth
              : 0.0;
          break;
        case TextAlign.end:
          webOnlyAlignOffset = _textDirection == TextDirection.ltr
              ? constraints.width - _maxIntrinsicWidth
              : 0.0;
          break;
        default:
          webOnlyAlignOffset = 0.0;
          break;
      }
    }
  }

  /// Returns the style that contains properties for layout computation.
  ParagraphGeometricStyle webOnlyGetParagraphGeometricStyle() =>
      _paragraphGeometricStyle;

  /// This paragraph's text as a plain string.
  ///
  /// This value is non-null only if the text is not rich. See
  /// [ParagraphBuilder] for more details on what is considered "rich".
  String webOnlyGetPlainText() => _plainText;

  /// This paragraph's color as a [Paint] object.
  ///
  /// This value is non-null only if the text is not rich. See
  /// [ParagraphBuilder] for more details on what is considered "rich".
  Paint webOnlyGetPaint() => _paint;

  /// Called by the text measurement system to report the layout attributes
  /// computed for this paragraph.
  ///
  /// All of the arguments must be non-null.
  void webOnlySetComputedLayout({
    @required double width,
    @required double height,
    @required double minIntrinsicWidth,
    @required double maxIntrinsicWidth,
    @required double alphabeticBaseline,
    @required double ideographicBaseline,
    @required bool isSingleLine,
  }) {
    assert(width != null &&
        height != null &&
        minIntrinsicWidth != null &&
        maxIntrinsicWidth != null &&
        minIntrinsicWidth <= maxIntrinsicWidth &&
        alphabeticBaseline != null &&
        ideographicBaseline != null);
    _width = width;
    _height = height;
    _minIntrinsicWidth = minIntrinsicWidth;
    _maxIntrinsicWidth = maxIntrinsicWidth;
    _alphabeticBaseline = alphabeticBaseline;
    _ideographicBaseline = ideographicBaseline;
    _webOnlyIsSingleLine = isSingleLine;
    _webOnlyIsLaidOut = true;
  }

  /// Whether or not this paragraph can be drawn on a single line.
  bool _webOnlyIsSingleLine = false;

  /// Returns `true` if this paragraph can be directly painted to the canvas.
  ///
  /// For now, we can only draw paragraphs onto the canvas directly if they
  /// are on a single line and do not use rich text.
  // TODO(yjbanov): This is Engine-internal API. We should make it private.
  bool get webOnlyDrawOnCanvas => _webOnlyIsSingleLine && _plainText != null;

  /// Whether this paragraph has been laid out.
  // TODO(yjbanov): This is Engine-internal API. We should make it private.
  bool get webOnlyIsLaidOut => _webOnlyIsLaidOut;
  bool _webOnlyIsLaidOut = false;

  /// Asserts that the properties used to measure paragraph layout are the same
  /// as the properties of this paragraphs root style.
  ///
  /// Ignores properties that do not affect layout, such as
  /// [ParagraphStyle.textAlign].
  bool webOnlyDebugHasSameRootStyle(ParagraphGeometricStyle style) {
    assert(() {
      if (style != _paragraphGeometricStyle) {
        throw Exception('Attempted to measure a paragraph whose style is '
            'different from the style of the ruler used to measure it.');
      }
      return true;
    }());
    return true;
  }

  /// Returns a list of text boxes that enclose the given text range.
  List<TextBox> getBoxesForRange(int start, int end) {
    if (_plainText == null) {
      return [];
    }

    // Eliminate negative indices
    start = start.clamp(0, _plainText.length);
    end = end.clamp(0, _plainText.length);

    final double boxLeftOffset = _getBoxLeftOffset(start);
    end = math.min(end, _plainText.length);
    final TextDimensions box = end < _plainText.length
        ? _measureBox(_plainText.substring(0, end))
        : _measureBox(_plainText);

    return <TextBox>[
      TextBox.fromLTRBD(
        webOnlyAlignOffset + boxLeftOffset,
        0,
        webOnlyAlignOffset + box.width,
        box.height,
        _textDirection,
      ),
    ];
  }

  TextDimensions _measureBox(String plainText) {
    final Paragraph clone = _cloneWithText(plainText);
    return TextMeasurementService.instance.measureSingleLineText(clone);
  }

  double _getBoxLeftOffset(int start) {
    if (start == 0) {
      return 0;
    }

    return TextMeasurementService.instance.measureSingleLineWidth(
        _plainText.substring(0, start), _paragraphGeometricStyle);
  }

  Paragraph _cloneWithText(String plainText) {
    return Paragraph._(
      plainText: plainText,
      paragraphElement: _paragraphElement.clone(true),
      paragraphGeometricStyle: _paragraphGeometricStyle,
      paint: _paint,
      textAlign: _textAlign,
      textDirection: _textDirection,
    );
  }

  /// Returns the text position closest to the given offset.
  ///
  /// It does so by performing a binary search to find where the tap occurred
  /// within the text.
  TextPosition getPositionForOffset(Offset offset) {
    if (_plainText == null) {
      return TextPosition(offset: 0);
    }

    final double dx = offset.dx - webOnlyAlignOffset;
    final TextMeasurementService instance = TextMeasurementService.instance;

    int low = 0;
    int high = _plainText.length;
    do {
      final int current = (low + high) ~/ 2;
      final double width = instance.measureSingleLineWidth(
          _plainText.substring(0, current), _paragraphGeometricStyle);
      if (width < dx) {
        low = current;
      } else if (width > dx) {
        high = current;
      } else {
        low = high = current;
      }
    } while (high - low > 1);

    if (low == high) {
      // The offset falls exactly in between the two letters.
      return TextPosition(offset: high, affinity: TextAffinity.upstream);
    }

    final double lowWidth = instance.measureSingleLineWidth(
        _plainText.substring(0, low), _paragraphGeometricStyle);
    final double highWidth = instance.measureSingleLineWidth(
        _plainText.substring(0, high), _paragraphGeometricStyle);

    if (dx - lowWidth < highWidth - dx) {
      // The offset is closer to the low index.
      return TextPosition(offset: low, affinity: TextAffinity.downstream);
    } else {
      // The offset is closer to high index.
      return TextPosition(offset: high, affinity: TextAffinity.upstream);
    }
  }

  /// Returns the [start, end] of the word at the given offset. Characters not
  /// part of a word, such as spaces, symbols, and punctuation, have word breaks
  /// on both sides. In such cases, this method will return [offset, offset+1].
  /// Word boundaries are defined more precisely in Unicode Standard Annex #29
  /// http://www.unicode.org/reports/tr29/#Word_Boundaries
  List<int> getWordBoundary(int offset) {
    if (_plainText == null) {
      return [offset, offset];
    }

    final int start = WordBreaker.prevBreakIndex(_plainText, offset);
    final int end = WordBreaker.nextBreakIndex(_plainText, offset);
    return [start, end];
  }

  // TODO(yjbanov): figure out if we need this.
  // Redirecting the paint function in this way solves some dependency problems
  // in the C++ code. If we straighten out the C++ dependencies, we can remove
  // this indirection.
//  void _paint(Canvas canvas, double x, double y) native 'Paragraph_paint';
}

/// Builds a [Paragraph] containing text with the given styling information.
///
/// To set the paragraph's alignment, truncation, and ellipsising behavior, pass
/// an appropriately-configured [ParagraphStyle] object to the [new
/// ParagraphBuilder] constructor.
///
/// Then, call combinations of [pushStyle], [addText], and [pop] to add styled
/// text to the object.
///
/// Finally, call [build] to obtain the constructed [Paragraph] object. After
/// this point, the builder is no longer usable.
///
/// After constructing a [Paragraph], call [Paragraph.layout] on it and then
/// paint it with [Canvas.drawParagraph].
class ParagraphBuilder {
  /// Marks a call to the [pop] method in the [_ops] list.
  static final _paragraphBuilderPop = Object();

  final HtmlElement _paragraphElement = domRenderer.createElement('p');
  final ParagraphStyle _paragraphStyle;
  final List<dynamic> _ops = <dynamic>[];

  /// Creates a [ParagraphBuilder] object, which is used to create a
  /// [Paragraph].
  ParagraphBuilder(this._paragraphStyle) {
    applyParagraphStyleToElement(
        element: _paragraphElement, style: _paragraphStyle);
  }

  /// Applies the given style to the added text until [pop] is called.
  ///
  /// See [pop] for details.
  void pushStyle(TextStyle style) {
    _ops.add(style);
  }

  // TODO(yjbanov): do we need to do this?
//  static String _encodeLocale(Locale locale) => locale?.toString() ?? '';

  /// Ends the effect of the most recent call to [pushStyle].
  ///
  /// Internally, the paragraph builder maintains a stack of text styles. Text
  /// added to the paragraph is affected by all the styles in the stack. Calling
  /// [pop] removes the topmost style in the stack, leaving the remaining styles
  /// in effect.
  void pop() {
    _ops.add(_paragraphBuilderPop);
  }

  /// Adds the given text to the paragraph.
  ///
  /// The text will be styled according to the current stack of text styles.
  void addText(String text) {
    _ops.add(text);
  }

  /// Applies the given paragraph style and returns a [Paragraph] containing the
  /// added text and associated styling.
  ///
  /// After calling this function, the paragraph builder object is invalid and
  /// cannot be used further.
  Paragraph build() {
    return _tryBuildPlainText() ?? _buildRichText();
  }

  /// Attempts to build a [Paragraph] assuming it is plain text.
  ///
  /// A paragraph is considered plain if it is built using the following
  /// sequence of ops:
  ///
  /// * Zero-or-more calls to [pushStyle].
  /// * One-or-more calls to [addText].
  /// * Zero-or-more calls to [pop].
  ///
  /// Any other sequence will result in `null` and should be treated as rich
  /// text.
  ///
  /// Plain text is not the same as not having style. The text may be styled
  /// arbitrarily. However, it may not mix multiple styles in the same
  /// paragraph. Plain text is more efficient to lay out and measure than rich
  /// text.
  Paragraph _tryBuildPlainText() {
    Color color;
    TextDecoration decoration;
    Color decorationColor;
    TextDecorationStyle decorationStyle;
    FontWeight fontWeight = _paragraphStyle._fontWeight;
    FontStyle fontStyle = _paragraphStyle._fontStyle;
    TextBaseline textBaseline;
    String fontFamily = _paragraphStyle._fontFamily;
    double fontSize = _paragraphStyle._fontSize;
    TextAlign textAlign = _paragraphStyle._textAlign;
    TextDirection textDirection = _paragraphStyle._textDirection;
    double letterSpacing;
    double wordSpacing;
    double height;
    Locale locale = _paragraphStyle._locale;
    Paint background;
    Paint foreground;

    int i = 0;

    // This loop looks expensive. However, in reality most of plain text
    // paragraphs will have no calls to [pushStyle], skipping this loop
    // entirely. Occasionally there will be one [pushStyle], which causes this
    // loop to run once then move on to aggregating text.
    while (i < _ops.length && _ops[i] is TextStyle) {
      TextStyle style = _ops[i];
      if (style._color != null) {
        color = style._color;
      }
      if (style._decoration != null) {
        decoration = style._decoration;
      }
      if (style._decorationColor != null) {
        decorationColor = style._decorationColor;
      }
      if (style._decorationStyle != null) {
        decorationStyle = style._decorationStyle;
      }
      if (style._fontWeight != null) {
        fontWeight = style._fontWeight;
      }
      if (style._fontStyle != null) {
        fontStyle = style._fontStyle;
      }
      if (style._textBaseline != null) {
        textBaseline = style._textBaseline;
      }
      if (style._fontFamily != null) {
        fontFamily = style._fontFamily;
      }
      if (style._fontSize != null) {
        fontSize = style._fontSize;
      }
      if (style._letterSpacing != null) {
        letterSpacing = style._letterSpacing;
      }
      if (style._wordSpacing != null) {
        wordSpacing = style._wordSpacing;
      }
      if (style._height != null) {
        height = style._height;
      }
      if (style._locale != null) {
        locale = style._locale;
      }
      if (style._background != null) {
        background = style._background;
      }
      if (style._foreground != null) {
        foreground = style._foreground;
      }
      i++;
    }

    final TextStyle cumulativeStyle = TextStyle(
      color: color,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      textBaseline: textBaseline,
      fontFamily: fontFamily,
      fontSize: fontSize,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      height: height,
      locale: locale,
      background: background,
      foreground: foreground,
    );

    Paint paint;
    if (foreground != null) {
      paint = foreground;
    } else {
      paint = Paint();
      if (color != null) {
        paint.color = color;
      }
    }

    if (i >= _ops.length) {
      // Empty paragraph.
      applyTextStyleToElement(
          element: _paragraphElement, style: cumulativeStyle);
      return new Paragraph._(
        paragraphElement: _paragraphElement,
        paragraphGeometricStyle: ParagraphGeometricStyle(
          fontFamily: fontFamily,
          fontWeight: fontWeight,
          fontStyle: fontStyle,
          fontSize: fontSize,
        ),
        plainText: '',
        paint: paint,
        textAlign: textAlign,
        textDirection: textDirection,
      );
    }

    if (_ops[i] is! String) {
      // After a series of TextStyle ops there must be at least one text op.
      // Otherwise, treat it as rich text.
      return null;
    }

    // Accumulate text into one contiguous string.
    final StringBuffer plainTextBuffer = StringBuffer();
    while (i < _ops.length && _ops[i] is String) {
      plainTextBuffer.write(_ops[i]);
      i++;
    }

    // After a series of [addText] ops there should only be a tail of [pop]s and
    // nothing else. Otherwise it's rich text and we return null;
    for (; i < _ops.length; i++) {
      if (_ops[i] != _paragraphBuilderPop) {
        return null;
      }
    }

    final String plainText = plainTextBuffer.toString();
    domRenderer.appendText(_paragraphElement, plainText);
    applyTextStyleToElement(element: _paragraphElement, style: cumulativeStyle);
    return new Paragraph._(
      paragraphElement: _paragraphElement,
      paragraphGeometricStyle: ParagraphGeometricStyle(
        fontFamily: fontFamily,
        fontWeight: fontWeight,
        fontStyle: fontStyle,
        fontSize: fontSize,
      ),
      plainText: plainText,
      paint: paint,
      textAlign: textAlign,
      textDirection: textDirection,
    );
  }

  /// Builds a [Paragraph] as rich text.
  Paragraph _buildRichText() {
    List<dynamic> elementStack = <dynamic>[];
    dynamic currentElement() =>
        elementStack.isNotEmpty ? elementStack.last : _paragraphElement;
    for (int i = 0; i < _ops.length; i++) {
      dynamic op = _ops[i];
      if (op is TextStyle) {
        var span = domRenderer.createElement('span');
        applyTextStyleToElement(element: span, style: op);
        domRenderer.append(currentElement(), span);
        elementStack.add(span);
      } else if (op is String) {
        domRenderer.appendText(currentElement(), op);
      } else if (identical(op, _paragraphBuilderPop)) {
        elementStack.removeLast();
      } else {
        throw UnsupportedError('Unsupported ParagraphBuilder operation: $op');
      }
    }

    return new Paragraph._(
      paragraphElement: _paragraphElement,
      paragraphGeometricStyle: ParagraphGeometricStyle(
        fontFamily: _paragraphStyle._fontFamily,
        fontWeight: _paragraphStyle._fontWeight,
        fontStyle: _paragraphStyle._fontStyle,
        fontSize: _paragraphStyle._fontSize,
      ),
      plainText: null,
      paint: null,
      textAlign: _paragraphStyle._textAlign,
      textDirection: _paragraphStyle._textDirection,
    );
  }
}

/// Applies a text [style] to an [element], translating the properties to their
/// corresponding CSS equivalents.
///
/// If [previousStyle] is not null, updates only the mismatching attributes.
void applyTextStyleToElement({
  @required HtmlElement element,
  @required TextStyle style,
  TextStyle previousStyle,
}) {
  assert(element != null);
  assert(style != null);

  if (previousStyle == null) {
    if (style._color != null) {
      domRenderer.setElementStyle(element, 'color', style._color.toCssString());
    }
    if (style._fontSize != null) {
      domRenderer.setElementStyle(
          element, 'font-size', '${style._fontSize.floor()}px');
    }
    if (style._fontWeight != null) {
      domRenderer.setElementStyle(
          element, 'font-weight', webOnlyFontWeightToCss(style._fontWeight));
    }
    if (style._fontStyle != null) {
      domRenderer.setElementStyle(element, 'font-style',
          style._fontStyle == FontStyle.normal ? 'normal' : 'italic');
    }
    if (style._fontFamily != null) {
      domRenderer.setElementStyle(element, 'font-family', style._fontFamily);
    }
  } else {
    if (style._color != previousStyle._color) {
      domRenderer.setElementStyle(
          element, 'color', style._color?.toCssString());
    }

    if (style._fontSize != previousStyle._fontSize) {
      domRenderer.setElementStyle(element, 'font-size',
          style._fontSize != null ? '${style._fontSize.floor()}px' : null);
    }

    if (style._fontWeight != previousStyle._fontWeight) {
      domRenderer.setElementStyle(
          element, 'font-weight', webOnlyFontWeightToCss(style._fontWeight));
    }

    if (style._fontStyle != previousStyle._fontStyle) {
      domRenderer.setElementStyle(
          element,
          'font-style',
          style._fontStyle != null
              ? style._fontStyle == FontStyle.normal ? 'normal' : 'italic'
              : null);
    }

    if (style._fontFamily != previousStyle._fontFamily) {
      domRenderer.setElementStyle(element, 'font-family', style._fontFamily);
    }
  }
}

/// Applies a paragraph [style] to an [element], translating the properties to
/// their corresponding CSS equivalents.
///
/// If [previousStyle] is not null, updates only the mismatching attributes.
void applyParagraphStyleToElement({
  @required HtmlElement element,
  @required ParagraphStyle style,
  ParagraphStyle previousStyle,
}) {
  assert(element != null);
  assert(style != null);
  // TODO(yjbanov): What do we do about ParagraphStyle._locale and ellipsis?
  if (previousStyle == null) {
    if (style._textAlign != null) {
      domRenderer.setElementStyle(
          element,
          'text-align',
          textAlignToCssValue(
              style._textAlign, style._textDirection ?? TextDirection.ltr));
    }
    if (style._maxLines != null) {
      domRenderer.setElementStyle(element, 'max-lines', '${style._maxLines}');
    }
    if (style._lineHeight != null) {
      domRenderer.setElementStyle(
          element, 'line-height', '${style._lineHeight}');
    }
    if (style._textDirection != null) {
      domRenderer.setElementStyle(
          element, 'direction', textDirectionToCssValue(style._textDirection));
    }
    if (style._fontSize != null) {
      domRenderer.setElementStyle(
          element, 'font-size', '${style._fontSize.floor()}px');
    }
    if (style._fontWeight != null) {
      domRenderer.setElementStyle(
          element, 'font-weight', webOnlyFontWeightToCss(style._fontWeight));
    }
    if (style._fontStyle != null) {
      domRenderer.setElementStyle(element, 'font-style',
          style._fontStyle == FontStyle.normal ? 'normal' : 'italic');
    }
    if (style._fontFamily != null) {
      domRenderer.setElementStyle(element, 'font-family', style._fontFamily);
    }
  } else {
    if (style._textAlign != previousStyle._textAlign) {
      domRenderer.setElementStyle(
          element,
          'text-align',
          textAlignToCssValue(
              style._textAlign, style._textDirection ?? TextDirection.ltr));
    }
    if (style._maxLines != previousStyle._maxLines) {
      domRenderer.setElementStyle(element, 'max-lines', '${style._maxLines}');
    }
    if (style._lineHeight != previousStyle._lineHeight) {
      domRenderer.setElementStyle(
          element, 'line-height', '${style._lineHeight}');
    }
    if (style._textDirection != previousStyle._textDirection) {
      domRenderer.setElementStyle(
          element, 'direction', textDirectionToCssValue(style._textDirection));
    }
    if (style._fontSize != previousStyle._fontSize) {
      domRenderer.setElementStyle(element, 'font-size',
          style._fontSize != null ? '${style._fontSize.floor()}px' : null);
    }
    if (style._fontWeight != previousStyle._fontWeight) {
      domRenderer.setElementStyle(
          element, 'font-weight', webOnlyFontWeightToCss(style._fontWeight));
    }
    if (style._fontStyle != previousStyle._fontStyle) {
      domRenderer.setElementStyle(
          element,
          'font-style',
          style._fontStyle != null
              ? style._fontStyle == FontStyle.normal ? 'normal' : 'italic'
              : null);
    }
    if (style._fontFamily != previousStyle._fontFamily) {
      domRenderer.setElementStyle(element, 'font-family', style._fontFamily);
    }
  }
}

/// Converts [fontWeight] to its CSS equivalent value.
String webOnlyFontWeightToCss(FontWeight fontWeight) {
  if (fontWeight == null) {
    return null;
  }

  switch (fontWeight.index) {
    case 0:
      return '100';
    case 1:
      return '200';
    case 2:
      return '300';
    case 3:
      return 'normal';
    case 4:
      return '500';
    case 5:
      return '600';
    case 6:
      return 'bold';
    case 7:
      return '800';
    case 8:
      return '900';
  }

  assert(() {
    throw AssertionError(
      'Failed to convert font weight ${fontWeight} to CSS.',
    );
  }());

  return '';
}
